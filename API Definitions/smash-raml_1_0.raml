#%RAML 1.0
title: SMASH - API
version: 1.19
baseUri: https://api.rest.sh/api
baseUriParameters: {}
documentation:
- title: SMASH - API
  content: "# Introduction\n* ## Multi-use Flexible API for: \n  * **User**:\n    * Login \n    * Registration\n    * User Management\n    * Profile Updates\n    * Two Factor Authentication\n     \n  * **Verifcation**:\n    * Identity Verification\n    * Address Verifcation\n    * Cell Phone Verification \n\n  * **Image**:\n    * Manipulation\n    * Compression\n    * Moderation\n     \n  * **Data**:\n    * Manipulation\n    * Compression\n    * Conversion\n    * Sorting\n\n  * **Services**:\n    * Node Application Hosting\n    * DNS Management\n    * CDN (Content Delivery Network)\n\n  * **Security**:\n    * Encryption\n    * Code Obfuscation\n    * Platform Identification\n    * WAF and DDOS Protection (Web Application Firewall)\n      * Advanced Logging\n\n# Overview\n\n*  **API Domain: api.rest.sh, api.restful.sh**\n\nThis API supports both GET and POST API requests with a JSON or XML output.\n\n*~ You can post to this API via a direct body response in JSON/XML, or using URL variables/requests.*\n\n# Authentication\nBe sure to include your User API KEY, and UID when sending a POST or GET request to our API.\n\n*~ If domain restriction is enabled in your dashboard, please include your domain in the request and redirect headers for your API calls.*\n\n# Status Codes\n* ## Success Codes:\n  *   **200**: Information Recieved\n  *   **201**: Success, Resource Created, or Updated\n  *   **202**: Proccessing\n\n* ## Information Codes:\n  *   **400**: Bad Request\n  *   **401**: Incorrect Credentials\n  *   **403**: Forbidden\n  *   **406**: Not Acceptable Input\n  *   **409**: Data Conflict\n  *   **413**: Payload Too Large\n  *   **415**: Un-Supported Content Type\n  *   **451**: Un-Available For Legal Reasons\n\n* ## Error Codes:\n  *   **500**: Internal API Error\n  *   **501**: Not Implemented\n  *   **503**: API Unavailable\n  *   **504**: Request Timeout\n  *   **511**: Authentication Required\n\n# Rate Pricing\n* **Verification requests:** \n  * per/1000 Requests: **$50.00**\n\n* **User requests:** \n  * per/1000 Requests: **$0.0072**\n\n* **Image requests:** \n  * per/1000 Requests: **$11.87**\n\n* Data requests: \n  * per/1MB: **$0.00024**\n\n* **Service requests:** \n  * **DNS Pricing Per Month:**\n    * Per Hosted Zone: **$1.00**\n    * Per Traffic Flow Record: **$100.00**\n    * Per 1 Million Queries: **$0.80**\n    * Per 1 Million Latency Based Queries: **$1.20**\n    * Per 1 Million GEO Queries: **$1.40**\n    * Per Health Check: **$1.00**\n\n  * **Hosting Per Month:**\n    * Per APP: **$5.00**\n\n  * **CDN Pricing per/1GB:**\n    * North America: **$0.17**\n    * Europe: **$0.17**\n    * Australia: **$0.28**\n    * Asia: **$0.28**\n    * India: **$0.34**\n    * South America: **$0.5**\n\n* **Security requests:** \n  * **WAF and DDOS Pricing Per Month:**\n    * per/1000 Web Requests: **$0.0012**\n    * Per Web Access Control List: **$10.00**\n    * Per Custom Domain Configuration: **$2.00**\n  \n  * **Encryption:**\n    * per/1000 data sets: **$0.0144**\n    * per/1MB per file: **$0.00048**\n\n  * **Code Obfuscation Per Month:**\n    * per/APP (300 files per app): **$102.00**\n\n  * **Code Obfuscation Per Month:**\n    * per/APP (300 files per app): **$102.00**\n\n  * **Advanced Logging:**\n    * per/1000 Log Entries: **$0.0072**"
types:
  MmddyyyyhhmmssModel:
    displayName: MMDDYYYYHHMMSS Model
    type: object
    properties:
      data:
        required: true
        displayName: data
        type: DataModel
  LoggingLogsModelResponse:
    example:
      value:
        log:
          01010101245901:
            data:
              result: INFO
              content: 'LOG: CONTENT AND ACTIONS PERFORMED'
              id: FUNCTION ID
          01010101245902:
            data:
              result: ERROR
              content: 'LOG: ERROR CONTENT AND ACTIONS PERFORMED'
              id: FUNCTION ID
    displayName: Logging Logs Model Response
    type: object
    properties:
      log:
        required: true
        displayName: log
        type: LogModel
  LoggingSetupModelResponse:
    example:
      value:
        success: RETURNS TRUE IF ADVANCED LOGGING IS ACTIVATED
    displayName: Logging Setup Model Response
    type: object
    properties:
      success:
        required: true
        displayName: success
        type: string
  DataManipulationModel:
    displayName: Data Manipulation Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      user:
        required: true
        displayName: user
        type: string
      apiuid:
        required: true
        displayName: apiuid
        type: string
      url:
        required: true
        displayName: url
        type: string
      manipulation:
        required: true
        displayName: manipulation
        type: string
      conversion:
        required: true
        displayName: conversion
        type: string
      sorting:
        required: true
        displayName: sorting
        type: string
      compression:
        required: true
        displayName: compression
        type: string
  VerifyAddress:
    displayName: Verify Address
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      user:
        required: true
        displayName: user
        type: string
      address:
        required: true
        displayName: address
        type: string
      a:
        required: true
        displayName: a
        type: string
      sa:
        required: true
        displayName: sa
        type: string
      c:
        required: true
        displayName: c
        type: string
      s:
        required: true
        displayName: s
        type: string
      z:
        required: true
        displayName: z
        type: string
  UserInformationModel:
    displayName: User Information Model
    type: object
    properties:
      realname:
        required: true
        displayName: realname
        type: string
      displayname:
        required: true
        displayName: displayname
        type: string
      avatar:
        required: true
        displayName: avatar
        type: string
      email:
        required: true
        displayName: email
        type: string
      address:
        required: true
        displayName: address
        type: string
      address1:
        required: true
        displayName: address1
        type: string
      address2:
        required: true
        displayName: address2
        type: string
      city:
        required: true
        displayName: city
        type: string
      state:
        required: true
        displayName: state
        type: string
      zipcode:
        required: true
        displayName: zipcode
        type: string
      phone:
        required: true
        displayName: phone
        type: string
      lastlogin:
        required: true
        displayName: lastlogin
        type: string
      ip:
        required: true
        displayName: ip
        type: string
      2fa:
        required: true
        displayName: 2fa
        type: string
      iplock:
        required: true
        displayName: iplock
        type: string
  UserUpdateModel:
    displayName: User Update Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      user:
        required: true
        displayName: user
        type: string
      apiuid:
        required: true
        displayName: apiuid
        type: string
      oldpassword:
        required: true
        displayName: oldpassword
        type: string
      newpassword:
        required: true
        displayName: newpassword
        type: string
      name:
        required: true
        displayName: name
        type: string
      email:
        required: true
        displayName: email
        type: string
      phone:
        required: true
        displayName: phone
        type: string
      avatar:
        required: true
        displayName: avatar
        type: string
      countrycode:
        required: true
        displayName: countrycode
        type: string
      address:
        required: true
        displayName: address
        type: string
      a:
        required: true
        displayName: a
        type: string
      sa:
        required: true
        displayName: sa
        type: string
      c:
        required: true
        displayName: c
        type: string
      s:
        required: true
        displayName: s
        type: string
      z:
        required: true
        displayName: z
        type: string
      custom-input:
        required: true
        displayName: custom-input
        type: string
  UserRegistrationModel:
    displayName: User Registration Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      user:
        required: true
        displayName: user
        type: string
      password:
        required: true
        displayName: password
        type: string
      name:
        required: true
        displayName: name
        type: string
      email:
        required: true
        displayName: email
        type: string
      phone:
        required: true
        displayName: phone
        type: string
      countrycode:
        required: true
        displayName: countrycode
        type: string
      address:
        required: true
        displayName: address
        type: string
      a:
        required: true
        displayName: a
        type: string
      sa:
        required: true
        displayName: sa
        type: string
      c:
        required: true
        displayName: c
        type: string
      s:
        required: true
        displayName: s
        type: string
      z:
        required: true
        displayName: z
        type: string
  InfoModel:
    displayName: Info Model
    type: object
    properties:
      uid:
        required: true
        displayName: uid
        type: string
      apiuid:
        required: true
        displayName: apiuid
        type: string
      realname:
        required: true
        displayName: realname
        type: string
      displayname:
        required: true
        displayName: displayname
        type: string
      avatar:
        required: true
        displayName: avatar
        type: string
      email:
        required: true
        displayName: email
        type: string
      address:
        required: true
        displayName: address
        type: string
      phone:
        required: true
        displayName: phone
        type: string
      lastlogin:
        required: true
        displayName: lastlogin
        type: string
      ip:
        required: true
        displayName: ip
        type: string
      2fa:
        required: true
        displayName: 2fa
        type: string
      iplock:
        required: true
        displayName: iplock
        type: string
  LoggingLogsModel:
    displayName: Logging Logs Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      name:
        required: true
        displayName: name
        type: string
      origin:
        required: true
        displayName: origin
        type: string
      time:
        required: true
        displayName: time
        type: string
  LoggingSetupModel:
    displayName: Logging Setup Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      name:
        required: true
        displayName: name
        type: string
      origin:
        required: true
        displayName: origin
        type: string
      activate:
        required: true
        displayName: activate
        type: string
  WafConfigurationModel:
    displayName: WAF Configuration Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      name:
        required: true
        displayName: name
        type: string
      origin:
        required: true
        displayName: origin
        type: string
      cname:
        required: true
        displayName: cname
        type: string
  WafCreationModel:
    displayName: WAF Creation Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      origin:
        required: true
        displayName: origin
        type: string
      cname:
        required: true
        displayName: cname
        type: string
  EncryptionModelResponse:
    example:
      value:
        data: RETURNED ENCRYPTED DATA URL
        file: RETURNED ENCRYPTED FILE URL
        success: SHOWS TRUE IF ENCRYPTION WAS SUCCESSFULL
        public: PUBLIC ENCRYPTION KEY FOR YOUR DATA OR FILES
        private: PRIVATE ENCRYPTION KEY FOR YOUR DATA OR FILES
    displayName: Encryption Model Response
    type: object
    properties:
      data:
        required: true
        displayName: data
        type: string
      file:
        required: true
        displayName: file
        type: string
      success:
        required: true
        displayName: success
        type: string
      public:
        required: true
        displayName: public
        type: string
      private:
        required: true
        displayName: private
        type: string
  EncryptionModel:
    displayName: Encryption Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      data:
        required: true
        displayName: data
        type: string
      file:
        required: true
        displayName: file
        type: string
      method:
        required: true
        displayName: method
        type: string
      bit:
        required: true
        displayName: bit
        type: string
  CdnPushModel:
    displayName: CDN Push Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      cname:
        required: true
        displayName: cname
        type: string
      file:
        required: true
        displayName: file
        type: string
  CdnPullModel:
    displayName: CDN Pull Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      origin:
        required: true
        displayName: origin
        type: string
      cname:
        required: true
        displayName: cname
        type: string
  DnsConfigurationModel:
    displayName: DNS Configuration Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      domain:
        required: true
        displayName: domain
        type: string
      records:
        required: true
        displayName: records
        type: string
  NameserversModel:
    displayName: Nameservers Model
    type: object
    properties:
      ns1:
        required: true
        displayName: ns1
        type: string
      ns2:
        required: true
        displayName: ns2
        type: string
      ns3:
        required: true
        displayName: ns3
        type: string
      ns4:
        required: true
        displayName: ns4
        type: string
  HostingModelResponse:
    example:
      value:
        request: REQUEST TYPE
        url: RETURNED APP HOSTING URL
        success: RETURNS TRUE IF APP WAS SUCCESSFULLY DEPLOYED
        id: TRANSACTION ID
    displayName: Hosting Model Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      url:
        required: true
        displayName: url
        type: string
      success:
        required: true
        displayName: success
        type: string
      id:
        required: true
        displayName: id
        type: string
  HostingModel:
    displayName: Hosting Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      app:
        required: true
        displayName: app
        type: string
      domain:
        required: true
        displayName: domain
        type: string
  DataManipulationModelResponse:
    example:
      value:
        request: REQUEST TYPE
        url: RETURNED DATA URL
        success: RETURNS TRUE IF DATA MANIPULATION WAS SUCCESSFULL
        id: TRANSACTION ID
    displayName: Data Manipulation Model Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      url:
        required: true
        displayName: url
        type: string
      success:
        required: true
        displayName: success
        type: string
      id:
        required: true
        displayName: id
        type: string
  ImageManipulationModelResponse:
    example:
      value:
        request: REQUEST TYPE
        url: RETURNED IMAGE URL AND DATA
        success: RETURNS TRUE IF IMAGE MANIPULATION WAS SUCCESSFULL
        moderated: RETURNS TRUE IF IMAGE CONTAINED GRAPHIC IMAGERY
        id: TRANSACTION ID
    displayName: Image Manipulation Model Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      url:
        required: true
        displayName: url
        type: string
      success:
        required: true
        displayName: success
        type: string
      moderated:
        required: true
        displayName: moderated
        type: string
      id:
        required: true
        displayName: id
        type: string
  ImageManipulationModel:
    displayName: Image Manipulation Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      image:
        required: true
        displayName: image
        type: string
      transform:
        required: true
        displayName: transform
        type: string
      moderate:
        required: true
        displayName: moderate
        type: string
  TwoFactorAuthenticationTokenModel:
    displayName: Two Factor Authentication Token Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      user:
        required: true
        displayName: user
        type: string
      code:
        required: true
        displayName: code
        type: string
  TwoFactorAuthenticationModel:
    displayName: Two Factor Authentication Model
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      to:
        required: true
        displayName: to
        type: string
      verified:
        required: true
        displayName: verified
        type: string
      id:
        required: true
        displayName: id
        type: string
  VerifyUserModel:
    displayName: Verify User Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      user:
        required: true
        displayName: user
        type: string
      code:
        required: true
        displayName: code
        type: string
  VerifyModelResponse:
    example:
      value:
        request: REQUEST TYPE
        to: USER BEING VERIFIED
        verified: RETURNS TRUE OR FALSE
        id: TRANSACTION ID
    displayName: Verify Model Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      to:
        required: true
        displayName: to
        type: string
      verified:
        required: true
        displayName: verified
        type: string
      id:
        required: true
        displayName: id
        type: string
  UserDeletionModel:
    displayName: User Deletion Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      user:
        required: true
        displayName: user
        type: string
      apiuid:
        required: true
        displayName: apiuid
        type: string
  UserInformationModelResponse:
    example:
      value:
        request: REQUEST TYPE
        uid: Users UID
        apiuid: API SIDE USER ID
        verified: RETURNS TRUE IF USER IS VERIFIED
        id: TRANSACTION ID
        info:
          realname: USERS REAL NAME
          displayname: USERS USERNAME
          avatar: USER AVATAR URL
          email: USERS EMAIL
          address: USERS ADDRESS IN ONE LINE SEPERATED BY COMMAS
          address1: USERS ADDRESS LINE ONE
          address2: USERS ADDRESS LINE TWO
          city: USERS ADDRESS CITY
          state: USERS ADDRESS STATE
          zipcode: USERS ADDRESS ZIPCODE
          phone: USERS CELL PHONE NUMBER
          lastlogin: USERS LAST LOGIN
          ip: USERS IP
          2fa: RETURNS TRUE IF 2FA IS ENABLED
          iplock: RETURNS TRUE IF IP LOCK IS ENABLED
    displayName: User Information Model Response
    type: object
    properties:
      user:
        required: true
        displayName: user
        type: string
      key:
        required: true
        displayName: key
        description: Users API Private Key
        type: string
      api:
        required: true
        displayName: api
        description: Users API Public Key
        type: string
      info:
        required: true
        displayName: info
        description: Users Profile Information
        type: UserInformationSecondaryModel
  UserInformationSecondaryModel:
    displayName: User Information Secondary Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      user:
        required: true
        displayName: user
        type: string
      apiuid:
        required: true
        displayName: apiuid
        type: string
  UserCustomUpdateModel:
    displayName: User Custom Update Model
    type: object
    properties:
      uid:
        required: true
        displayName: uid
        type: string
      apiuid:
        required: true
        displayName: apiuid
        type: string
      avatar:
        required: true
        displayName: avatar
        type: string
      custom-input:
        required: true
        displayName: custom-input
        type: string
  UserUpdateModelResponse:
    example:
      value:
        request: REQUEST TYPE
        updated: RETURNS TRUE, IF USERS PROFILE WAS SUCCESSFULLY UPDATED
        id: TRANSACTION ID
        info:
          uid: USERS ID
          apiuid: API SIDE USER ID
          avatar: INPUTTED AVATAR URL
          custom-input: CUSTOM INPUTTED PROFILE DATA
    displayName: User Update Model Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      updated:
        required: true
        displayName: updated
        type: string
      id:
        required: true
        displayName: id
        type: string
      info:
        required: true
        displayName: info
        type: UserCustomUpdateModel
  UserProfileInformationModel:
    displayName: User Profile Information Model
    type: object
    properties:
      uid:
        required: true
        displayName: uid
        type: string
      apiuid:
        required: true
        displayName: apiuid
        type: string
      realname:
        required: true
        displayName: realname
        type: string
      displayname:
        required: true
        displayName: displayname
        type: string
      email:
        required: true
        displayName: email
        type: string
      address:
        required: true
        displayName: address
        type: string
      phone:
        required: true
        displayName: phone
        type: string
  UserRegistrationModelResponse:
    example:
      value:
        request: REQUEST TYPE
        active: RETURNS TRUE, IF USER WAS SUCCESSFULLY REGISTERED
        id: TRANSACTION ID
        info:
          uid: USERS ID
          apiuid: API SIDE USER ID
          realname: USERS REAL NAME
          displayname: USERS USERNAME
          email: USERS EMAIL
          address: USERS ADDRESS
          phone: USERS CELL PHONE NUMBER
    displayName: User Registration Model Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      active:
        required: true
        displayName: active
        type: string
      id:
        required: true
        displayName: id
        type: string
      info:
        required: true
        displayName: info
        type: UserProfileInformationModel
  UserAuthenticationModelResponse:
    example:
      value:
        request: REQUEST TYPE
        uid: Users UID
        valid: RETURNS TRUE IF USER LOGIN DETAILS ARE VALID
        id: TRANSACTION ID
        info:
          uid: USERS ID
          apiuid: API SIDE USER ID
          realname: USERS REAL NAME
          displayname: USERS USERNAME
          avatar: USER AVATAR URL
          email: USERS EMAIL
          address: USERS ADDRESS
          phone: USERS CELL PHONE NUMBER
          lastlogin: USERS LAST LOGIN
          ip: USERS IP
          2fa: RETURNS TRUE IF 2FA IS ENABLED
          iplock: RETURNS TRUE IF IP LOCK IS ENABLED
    displayName: User Authentication Model Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      valid:
        required: true
        displayName: valid
        type: string
      id:
        required: true
        displayName: id
        type: string
      info:
        required: true
        displayName: info
        type: InfoModel
  UserAuthenticationModel:
    displayName: User Authentication Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      user:
        required: true
        displayName: user
        type: string
      password:
        required: true
        displayName: password
        type: string
  DataModel:
    displayName: Data Model
    type: object
    properties:
      result:
        required: true
        displayName: result
        type: string
      content:
        required: true
        displayName: content
        type: string
      id:
        required: true
        displayName: id
        type: string
  LogModel:
    displayName: Log Model
    type: object
    properties:
      MMDDYYYYHHMMSSX:
        required: true
        displayName: MMDDYYYYHHMMSSX
        type: MmddyyyyhhmmssModel
      MMDDYYYYHHMMSSY:
        required: true
        displayName: MMDDYYYYHHMMSSY
        type: MmddyyyyhhmmssModel
  WafConfigurationModelResponse:
    example:
      value:
        success: SHOWS TRUE WHEN THE WAF AND ORIGIN SHIELD (DDOS PROTECTION) IS DEPLOYED SUCCESSFULLY
        rule: RULES APPLIED TO WAF
    displayName: WAF Configuration Model Response
    type: object
    properties:
      success:
        required: true
        displayName: success
        type: string
      rule:
        required: true
        displayName: rule
        type: string
  WafCreationModelResponse:
    example:
      value:
        success: SHOWS TRUE WHEN THE WAF AND ORIGIN SHIELD (DDOS PROTECTION) IS DEPLOYED SUCCESSFULLY
        cname: RECORD TO APPEND YOUR URLS TO VIA A CNAME
    displayName: WAF Creation Model Response
    type: object
    properties:
      success:
        required: true
        displayName: success
        type: string
      cname:
        required: true
        displayName: cname
        type: string
  CodeProtectionModelResponse:
    example:
      value:
        success: RETURNS TRUE IF APP WAS SUCCESSFULLY OBFUSCTATED AND PROTECTED
        app: OBFUSCATED APP URL
    displayName: Code Protection Model Response
    type: object
    properties:
      success:
        required: true
        displayName: success
        type: string
      app:
        required: true
        displayName: app
        type: string
  CodeProtectionModel:
    displayName: Code Protection Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      app:
        required: true
        displayName: app
        type: string
  CdnPushModelResponse:
    example:
      value:
        success: SHOWS TRUE WHEN PUSH ZONE IS DEPLOYED SUCCESSFULLY
        upload: LIST OF FILES UPLOADED TO YOUR PUSH ZONE
        cname: RECORD TO APPEND YOUR URLS TO VIA A CNAME
    displayName: CDN Push Model Response
    type: object
    properties:
      success:
        required: true
        displayName: success
        type: string
      upload:
        required: true
        displayName: upload
        type: string
      cname:
        required: true
        displayName: cname
        type: string
  CdnPullModelResponse:
    example:
      value:
        success: SHOWS TRUE WHEN PULL ZONE IS DEPLOYED SUCCESSFULLY
        cname: RECORD TO APPEND YOUR URLS TO VIA A CNAME
    displayName: CDN Pull Model Response
    type: object
    properties:
      success:
        required: true
        displayName: success
        type: string
      cname:
        required: true
        displayName: cname
        type: string
  DnsConfigurationModelResponse:
    example:
      value:
        success: SHOWS TRUE IF RECORDS WERE SUCCESSFULLY SET
        domain: DOMAIN
        records: RECORDS SET TO DOMAIN
    displayName: DNS Configuration Model Response
    type: object
    properties:
      success:
        required: true
        displayName: success
        type: string
      domain:
        required: true
        displayName: domain
        type: string
      records:
        required: true
        displayName: records
        type: string
  DnsCreationModelResponse:
    example:
      value:
        domain: LIST OF DOMAINS ADDED
        nameservers:
          ns1: NAME SERVER ONE TO POINT YOUR DOMAIN AT
          ns2: NAME SERVER TWO TO POINT YOUR DOMAIN AT
          ns3: NAME SERVER THREE TO POINT YOUR DOMAIN AT
          ns4: NAME SERVER FOUR TO POINT YOUR DOMAIN AT
    displayName: DNS Creation Model Response
    type: object
    properties:
      domain:
        required: true
        displayName: domain
        type: string
      nameservers:
        required: true
        displayName: nameservers
        type: NameserversModel
  DnsCreationModel:
    displayName: DNS Creation Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      domain:
        required: true
        displayName: domain
        type: string
  TwoFactorAuthenticationTokenModelResponse:
    example:
      value:
        request: REQUEST TYPE
        correct: RETURNS IF 2FA TOKEN IS CORRECT
        id: TRANSACTION ID
    displayName: Two Factor Authentication Token Model Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      correct:
        required: true
        displayName: correct
        type: string
      id:
        required: true
        displayName: id
        type: string
  TwoFactorAuthenticationModelResponse:
    example:
      value:
        request: REQUEST TYPE
        to: USER BEING VERIFIED
        verified: RETURNS TRUE OR FALSE
        id: TRANSACTION ID
    displayName: Two Factor Authentication Model Response
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      to:
        required: true
        displayName: to
        type: string
  VerifyAddressResponse:
    example:
      value:
        request: REQUEST TYPE
        active: RETURNS TRUE, IF ADDRESS IS ACTIVE AND IF USER IS CURRENTLY THERE
        id: TRANSACTION ID
    displayName: Verify Address Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      active:
        required: true
        displayName: active
        type: string
      id:
        required: true
        displayName: id
        type: string
  VerifyUserModelResponse:
    example:
      value:
        request: REQUEST TYPE
        correct: RETURNS IF 2FA TOKEN IS CORRECT
        id: TRANSACTION ID
    displayName: Verify User Model Response
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      correct:
        required: true
        displayName: correct
        type: string
      id:
        required: true
        displayName: id
        type: string
  VerifyModel:
    displayName: Verify Model
    type: object
    properties:
      key:
        required: true
        displayName: key
        type: string
      uid:
        required: true
        displayName: uid
        type: string
      to:
        required: true
        displayName: to
        type: string
  UserDeletionResponseModel:
    example:
      value:
        request: REQUEST TYPE
        deleted: RETURNS TRUE, IF USERS ACCOUNT WAS SUCCESSFULLY DELETED
        id: TRANSACTION ID
    displayName: User Deletion Response Model
    type: object
    properties:
      request:
        required: true
        displayName: request
        type: string
      deleted:
        required: true
        displayName: deleted
        type: string
      id:
        required: true
        displayName: id
        type: string
/d:
  get:
    displayName: https://api.rest.sh/api/d
    description: Data Manipulation API
    queryParameters:
      data:
        required: true
        example:
          value: https://static.yourcdn.com/data.file
        displayName: data
        description: Data URL, data as a query string, or direct upload
        type: string
      transform:
        required: true
        displayName: transform
        description: Transformations to perform
        type: string
    responses:
      200:
        description: Success
        body:
          application/json:
            example:
              value:
                request: REQUEST TYPE
                url: RETURNED DATA URL
                success: RETURNS TRUE IF DATA MANIPULATION WAS SUCCESSFULL
                id: TRANSACTION ID
            displayName: Response
            type: DataManipulationModelResponse
      400:
        description: Bad Request
        body: {}
      401:
        description: Incorrect Credentials
        body: {}
      403:
        description: Forbidden
        body: {}
      406:
        description: Not Acceptable Input
        body: {}
      409:
        description: Data Conflict
        body: {}
      413:
        description: Payload Too Large
        body: {}
      415:
        description: Un-Supported Content Type
        body: {}
      451:
        description: Un-Available For Legal Reasons
        body: {}
      500:
        description: Internal API Error
        body: {}
      501:
        description: Not Implemented
        body: {}
      503:
        description: API Unavailable
        body: {}
      504:
        description: Request Timeout
        body: {}
      511:
        description: Authentication Required
        body: {}
/i:
  get:
    displayName: Image Manipulation
    description: Image Manipulation API
    queryParameters:
      image:
        required: true
        example:
          value: https://img.yourdomain.tld/image.type
        displayName: image
        description: Image URL or direct upload
        type: string
      transform:
        required: true
        example:
          value: x:flip,y:flip,grayscale:true,compress:true;80,convert:png
        displayName: transform
        description: Transformations to perform
        type: string
    responses:
      200:
        description: Success
        body:
          application/json:
            example:
              value:
                request: REQUEST TYPE
                url: RETURNED IMAGE URL AND DATA
                success: RETURNS TRUE IF IMAGE MANIPULATION WAS SUCCESSFULL
                moderated: RETURNS TRUE IF IMAGE CONTAINED GRAPHIC IMAGERY
                id: TRANSACTION ID
            displayName: Response
            type: ImageManipulationModelResponse
      400:
        description: Bad Request
        body: {}
      401:
        description: Incorrect Credentials
        body: {}
      403:
        description: Forbidden
        body: {}
      406:
        description: Not Acceptable Input
        body: {}
      409:
        description: Data Conflict
        body: {}
      413:
        description: Payload Too Large
        body: {}
      415:
        description: Un-Supported Content Type
        body: {}
      451:
        description: Un-Available For Legal Reasons
        body: {}
      500:
        description: Internal API Error
        body: {}
      501:
        description: Not Implemented
        body: {}
      503:
        description: API Unavailable
        body: {}
      504:
        description: Request Timeout
        body: {}
      511:
        description: Authentication Required
        body: {}
/2fa:
  get:
    displayName: Two Factor Authentication
    description: Two Factor Authentication API
    queryParameters:
      to:
        required: true
        example:
          value: UID
        displayName: to
        description: Users UID, Username, Email, Or Cellphone number
        type: string
    responses:
      200:
        description: Success
        body:
          application/json:
            example:
              value:
                request: REQUEST TYPE
                to: USER BEING VERIFIED
                verified: RETURNS TRUE OR FALSE
                id: TRANSACTION ID
            displayName: Response
            type: TwoFactorAuthenticationModelResponse
      400:
        description: Bad Request
        body: {}
      401:
        description: Incorrect Credentials
        body: {}
      403:
        description: Forbidden
        body: {}
      406:
        description: Not Acceptable Input
        body: {}
      409:
        description: Data Conflict
        body: {}
      413:
        description: Payload Too Large
        body: {}
      415:
        description: Un-Supported Content Type
        body: {}
      451:
        description: Un-Available For Legal Reasons
        body: {}
      500:
        description: Internal API Error
        body: {}
      501:
        description: Not Implemented
        body: {}
      503:
        description: API Unavailable
        body: {}
      504:
        description: Request Timeout
        body: {}
      511:
        description: Authentication Required
        body: {}
  /t:
    get:
      displayName: 2FA Token Response
      description: Two Factor Authentication Token Reply
      queryParameters:
        user:
          required: true
          example:
            value: UID
          displayName: user
          description: Users UID, Username or Email
          type: string
        code:
          required: true
          example:
            value: CODE
          displayName: code
          description: Response From User Containing 2FA Code
          type: string
      responses:
        200:
          description: Success
          body:
            application/json:
              example:
                value:
                  request: REQUEST TYPE
                  correct: RETURNS IF 2FA TOKEN IS CORRECT
                  id: TRANSACTION ID
              displayName: Response
              type: TwoFactorAuthenticationTokenModelResponse
        400:
          description: Bad Request
          body: {}
        401:
          description: Incorrect Credentials
          body: {}
        403:
          description: Forbidden
          body: {}
        406:
          description: Not Acceptable Input
          body: {}
        409:
          description: Data Conflict
          body: {}
        413:
          description: Payload Too Large
          body: {}
        415:
          description: Un-Supported Content Type
          body: {}
        451:
          description: Un-Available For Legal Reasons
          body: {}
        500:
          description: Internal API Error
          body: {}
        501:
          description: Not Implemented
          body: {}
        503:
          description: API Unavailable
          body: {}
        504:
          description: Request Timeout
          body: {}
        511:
          description: Authentication Required
          body: {}
/v:
  get:
    displayName: User Verification
    description: User Verification API
    queryParameters:
      user:
        required: true
        example:
          value: UID
        displayName: user
        description: Users UID, Username, Or Email
        type: string
    responses:
      200:
        description: Success
        body:
          application/json:
            example:
              value:
                request: REQUEST TYPE
                to: USER BEING VERIFIED
                verified: RETURNS TRUE OR FALSE
                id: TRANSACTION ID
            displayName: Response
            type: VerifyModelResponse
      400:
        description: Bad Request
        body: {}
      401:
        description: Incorrect Credentials
        body: {}
      403:
        description: Forbidden
        body: {}
      406:
        description: Not Acceptable Input
        body: {}
      409:
        description: Data Conflict
        body: {}
      413:
        description: Payload Too Large
        body: {}
      415:
        description: Un-Supported Content Type
        body: {}
      451:
        description: Un-Available For Legal Reasons
        body: {}
      500:
        description: Internal API Error
        body: {}
      501:
        description: Not Implemented
        body: {}
      503:
        description: API Unavailable
        body: {}
      504:
        description: Request Timeout
        body: {}
      511:
        description: Authentication Required
        body: {}
/s:
  /l:
    get:
      displayName: Logging Configuration
      description: WAF Log Configuration
      queryParameters:
        name:
          required: true
          example:
            value: origin-name
          displayName: name
          description: Name of the WAF zone
          type: string
        origin:
          required: true
          example:
            value: origin.yourdomain.tld
          displayName: origin
          description: IP Address of the Web Application you wish to configure logging on
          type: string
        activate:
          required: true
          displayName: activate
          description: Activate or Disable
          type: string
      responses:
        200:
          description: Success
          body:
            application/json:
              example:
                value:
                  success: RETURNS TRUE IF ADVANCED LOGGING IS ACTIVATED
              displayName: Response
              type: LoggingSetupModelResponse
        400:
          description: Bad Request
          body: {}
        401:
          description: Incorrect Credentials
          body: {}
        403:
          description: Forbidden
          body: {}
        406:
          description: Not Acceptable Input
          body: {}
        409:
          description: Data Conflict
          body: {}
        413:
          description: Payload Too Large
          body: {}
        415:
          description: Un-Supported Content Type
          body: {}
        451:
          description: Un-Available For Legal Reasons
          body: {}
        500:
          description: Internal API Error
          body: {}
        501:
          description: Not Implemented
          body: {}
        503:
          description: API Unavailable
          body: {}
        504:
          description: Request Timeout
          body: {}
        511:
          description: Authentication Required
          body: {}
    /i:
      get:
        displayName: Logging Info
        description: WAF Log Info
        queryParameters:
          name:
            required: true
            example:
              value: origin-name
            displayName: name
            description: Name of your WAF zone
            type: string
          origin:
            required: true
            example:
              value: origin.yourdomain.tld
            displayName: origin
            description: IP Address of the Web Application
            type: string
          time:
            required: false
            example:
              value: 01/01/0101;24:59:01
            displayName: time
            description: Specific times or dates to lookup separated by a comma in MMDDYYHHMMSS Format ( Month Month Day Day Year Year Year Hour Hour Minute Minute Second Second [01/01/0101;24:59:01])
            type: string
        responses:
          200:
            description: Success
            body:
              application/json:
                example:
                  value:
                    log:
                      01010101245901:
                        data:
                          result: INFO
                          content: 'LOG: CONTENT AND ACTIONS PERFORMED'
                          id: FUNCTION ID
                      01010101245902:
                        data:
                          result: ERROR
                          content: 'LOG: ERROR CONTENT AND ACTIONS PERFORMED'
                          id: FUNCTION ID
                displayName: Response
                type: LoggingLogsModelResponse
          400:
            description: Bad Request
            body: {}
          401:
            description: Incorrect Credentials
            body: {}
          403:
            description: Forbidden
            body: {}
          406:
            description: Not Acceptable Input
            body: {}
          409:
            description: Data Conflict
            body: {}
          413:
            description: Payload Too Large
            body: {}
          415:
            description: Un-Supported Content Type
            body: {}
          451:
            description: Un-Available For Legal Reasons
            body: {}
          500:
            description: Internal API Error
            body: {}
          501:
            description: Not Implemented
            body: {}
          503:
            description: API Unavailable
            body: {}
          504:
            description: Request Timeout
            body: {}
          511:
            description: Authentication Required
            body: {}
  /w:
    get:
      displayName: WAF Creation
      description: WAF and DDOS Creation
      queryParameters:
        origin:
          required: true
          example:
            value: origin.yourdomain.tld
          displayName: origin
          description: IP of the Web server you wish to protect
          type: string
        cname:
          required: true
          example:
            value: yourdomain.tld,www.yourdomain.tld
          displayName: cname
          description: Domain or domain names separated by a comma you wish to allow CNAME access
          type: string
      responses:
        200:
          description: Success
          body:
            application/json:
              example:
                value:
                  success: SHOWS TRUE WHEN THE WAF AND ORIGIN SHIELD (DDOS PROTECTION) IS DEPLOYED SUCCESSFULLY
                  cname: RECORD TO APPEND YOUR URLS TO VIA A CNAME
              displayName: Response
              type: WafCreationModelResponse
        400:
          description: Bad Request
          body: {}
        401:
          description: Incorrect Credentials
          body: {}
        403:
          description: Forbidden
          body: {}
        406:
          description: Not Acceptable Input
          body: {}
        409:
          description: Data Conflict
          body: {}
        413:
          description: Payload Too Large
          body: {}
        415:
          description: Un-Supported Content Type
          body: {}
        451:
          description: Un-Available For Legal Reasons
          body: {}
        500:
          description: Internal API Error
          body: {}
        501:
          description: Not Implemented
          body: {}
        503:
          description: API Unavailable
          body: {}
        504:
          description: Request Timeout
          body: {}
        511:
          description: Authentication Required
          body: {}
    /c:
      get:
        displayName: WAF Configuration
        description: WAF and DDOS Configuration
        queryParameters:
          name:
            required: true
            example:
              value: origin-name
            displayName: name
            description: Name of your WAF zone
            type: string
          rule:
            required: true
            example:
              value: header:Access-Control-Allow-Origin;yourdomain.tld;seconddomain.tld,match:ip;127.0.0.1;does
            displayName: rule
            description: Rule or rules to add or update separated by a comma
            type: string
        responses:
          200:
            description: Success
            body:
              application/json:
                example:
                  value:
                    success: SHOWS TRUE WHEN THE WAF AND ORIGIN SHIELD (DDOS PROTECTION) IS DEPLOYED SUCCESSFULLY
                    rule: RULES APPLIED TO WAF
                displayName: Response
                type: WafConfigurationModelResponse
          400:
            description: Bad Request
            body: {}
          401:
            description: Incorrect Credentials
            body: {}
          403:
            description: Forbidden
            body: {}
          406:
            description: Not Acceptable Input
            body: {}
          409:
            description: Data Conflict
            body: {}
          413:
            description: Payload Too Large
            body: {}
          415:
            description: Un-Supported Content Type
            body: {}
          451:
            description: Un-Available For Legal Reasons
            body: {}
          500:
            description: Internal API Error
            body: {}
          501:
            description: Not Implemented
            body: {}
          503:
            description: API Unavailable
            body: {}
          504:
            description: Request Timeout
            body: {}
          511:
            description: Authentication Required
            body: {}
  /e:
    get:
      displayName: Data and File Encryption
      description: Data and File Encryption API
      queryParameters:
        data:
          required: true
          example:
            value: DATA
          displayName: data
          description: GIT URL, file URL, direct upload of file, or data as a query string
          type: string
        method:
          required: true
          example:
            value: DES,RSA
          displayName: method
          description: Single or multiple encryption types to apply to data or files separated by a comma (DES, RSA, BLOWFISH, TWOFISH, AES, IDEA, PGP)
          type: string
        bit:
          required: true
          example:
            value: 4096
          displayName: bit
          description: Encryption key size (4096)
          type: integer
          format: int32
      responses:
        200:
          description: Success
          body:
            application/json:
              example:
                value:
                  data: RETURNED ENCRYPTED DATA URL
                  file: RETURNED ENCRYPTED FILE URL
                  success: SHOWS TRUE IF ENCRYPTION WAS SUCCESSFULL
                  public: PUBLIC ENCRYPTION KEY FOR YOUR DATA OR FILES
                  private: PRIVATE ENCRYPTION KEY FOR YOUR DATA OR FILES
              displayName: Response
              type: EncryptionModelResponse
        400:
          description: Bad Request
          body: {}
        401:
          description: Incorrect Credentials
          body: {}
        403:
          description: Forbidden
          body: {}
        406:
          description: Not Acceptable Input
          body: {}
        409:
          description: Data Conflict
          body: {}
        413:
          description: Payload Too Large
          body: {}
        415:
          description: Un-Supported Content Type
          body: {}
        451:
          description: Un-Available For Legal Reasons
          body: {}
        500:
          description: Internal API Error
          body: {}
        501:
          description: Not Implemented
          body: {}
        503:
          description: API Unavailable
          body: {}
        504:
          description: Request Timeout
          body: {}
        511:
          description: Authentication Required
          body: {}
  /o:
    get:
      displayName: Obfuscation and Anti-Tampering
      description: Javascript and Node.JS Obfuscation and Anti-Tampering API
      queryParameters:
        app:
          required: true
          example:
            value: git://app.git
          displayName: app
          description: GIT URL or ZIP package containing your APP
          type: string
      responses:
        200:
          description: Success
          body:
            application/json:
              example:
                value:
                  success: RETURNS TRUE IF APP WAS SUCCESSFULLY OBFUSCTATED AND PROTECTED
                  app: OBFUSCATED APP URL
              displayName: Response
              type: CodeProtectionModelResponse
        400:
          description: Bad Request
          body: {}
        401:
          description: Incorrect Credentials
          body: {}
        403:
          description: Forbidden
          body: {}
        406:
          description: Not Acceptable Input
          body: {}
        409:
          description: Data Conflict
          body: {}
        413:
          description: Payload Too Large
          body: {}
        415:
          description: Un-Supported Content Type
          body: {}
        451:
          description: Un-Available For Legal Reasons
          body: {}
        500:
          description: Internal API Error
          body: {}
        501:
          description: Not Implemented
          body: {}
        503:
          description: API Unavailable
          body: {}
        504:
          description: Request Timeout
          body: {}
        511:
          description: Authentication Required
          body: {}
  /h:
    get:
      displayName: Hosting Setup
      description: Node.JS and Static Web APP Hosting
      queryParameters:
        app:
          required: true
          example:
            value: git://app.git
          displayName: app
          description: GIT URL or ZIP package containing your APP
          type: string
        domain:
          required: true
          example:
            value: yourdomain.tld,seconddomain.tld
          displayName: domain
          description: Domain or domain names separated by a comma
          type: string
      responses:
        200:
          description: Success
          body:
            application/json:
              example:
                value:
                  request: REQUEST TYPE
                  url: RETURNED APP HOSTING URL
                  success: RETURNS TRUE IF APP WAS SUCCESSFULLY DEPLOYED
                  id: TRANSACTION ID
              displayName: Response
              type: HostingModelResponse
        400:
          description: Bad Request
          body: {}
        401:
          description: Incorrect Credentials
          body: {}
        403:
          description: Forbidden
          body: {}
        406:
          description: Not Acceptable Input
          body: {}
        409:
          description: Data Conflict
          body: {}
        413:
          description: Payload Too Large
          body: {}
        415:
          description: Un-Supported Content Type
          body: {}
        451:
          description: Un-Available For Legal Reasons
          body: {}
        500:
          description: Internal API Error
          body: {}
        501:
          description: Not Implemented
          body: {}
        503:
          description: API Unavailable
          body: {}
        504:
          description: Request Timeout
          body: {}
        511:
          description: Authentication Required
          body: {}
  /c:
    /push:
      get:
        displayName: CDN Push Zone
        description: CDN Push Zone API
        queryParameters:
          cname:
            required: true
            example:
              value: cdn.yourdomain.tld,cdn1.yourdomain.tld,cdn2.yourdomain.tld
            displayName: cname
            description: Domain or domain names separated by a comma you wish to allow CNAME access
            type: string
          file:
            required: true
            example:
              value: static.yourdomain.tld/file.type
            displayName: file
            description: GIT URL, file URL, or direct upload of file
            type: string
        responses:
          200:
            description: Success
            body:
              application/json:
                example:
                  value:
                    success: SHOWS TRUE WHEN PUSH ZONE IS DEPLOYED SUCCESSFULLY
                    upload: LIST OF FILES UPLOADED TO YOUR PUSH ZONE
                    cname: RECORD TO APPEND YOUR URLS TO VIA A CNAME
                displayName: Response
                type: CdnPushModelResponse
          400:
            description: Bad Request
            body: {}
          401:
            description: Incorrect Credentials
            body: {}
          403:
            description: Forbidden
            body: {}
          406:
            description: Not Acceptable Input
            body: {}
          409:
            description: Data Conflict
            body: {}
          413:
            description: Payload Too Large
            body: {}
          415:
            description: Un-Supported Content Type
            body: {}
          451:
            description: Un-Available For Legal Reasons
            body: {}
          500:
            description: Internal API Error
            body: {}
          501:
            description: Not Implemented
            body: {}
          503:
            description: API Unavailable
            body: {}
          504:
            description: Request Timeout
            body: {}
          511:
            description: Authentication Required
            body: {}
    /pull:
      get:
        displayName: CDN Pull Zone
        description: CDN Pull Zone API
        queryParameters:
          origin:
            required: true
            example:
              value: origin.yourdomain.tld
            displayName: origin
            description: Domain or domain names separated by a comma
            type: string
          cname:
            required: true
            example:
              value: cdn.yourdomain.tld,cdn1.yourdomain.tld,cdn2.yourdomain.tld
            displayName: cname
            description: Domain or domain names separated by a comma you wish to allow CNAME access
            type: string
        responses:
          200:
            description: Success
            body:
              application/json:
                example:
                  value:
                    success: SHOWS TRUE WHEN PULL ZONE IS DEPLOYED SUCCESSFULLY
                    cname: RECORD TO APPEND YOUR URLS TO VIA A CNAME
                displayName: Response
                type: CdnPullModelResponse
          400:
            description: Bad Request
            body: {}
          401:
            description: Incorrect Credentials
            body: {}
          403:
            description: Forbidden
            body: {}
          406:
            description: Not Acceptable Input
            body: {}
          409:
            description: Data Conflict
            body: {}
          413:
            description: Payload Too Large
            body: {}
          415:
            description: Un-Supported Content Type
            body: {}
          451:
            description: Un-Available For Legal Reasons
            body: {}
          500:
            description: Internal API Error
            body: {}
          501:
            description: Not Implemented
            body: {}
          503:
            description: API Unavailable
            body: {}
          504:
            description: Request Timeout
            body: {}
          511:
            description: Authentication Required
            body: {}
  /d:
    /c:
      get:
        displayName: DNS Configuration
        description: DNS Configuration API
        queryParameters:
          domain:
            required: true
            example:
              value: yourdomain.tld
            displayName: domain
            description: Domain or domain names separated by a comma
            type: string
          records:
            required: true
            example:
              value: set:root:a:127.0.0.1,set:www:a:127.0.0.1,set:cdn:cname:cname.domain.com
            displayName: records
            description: Records to append to domain separated by a comma (a;www.mydomain.com;127.0.0.0,cname;mydomain.com;otherdomain.com)
            type: string
        responses:
          200:
            description: Success
            body:
              application/json:
                example:
                  value:
                    success: SHOWS TRUE IF RECORDS WERE SUCCESSFULLY SET
                    domain: DOMAIN
                    records: RECORDS SET TO DOMAIN
                displayName: Response
                type: DnsConfigurationModelResponse
          400:
            description: Bad Request
            body: {}
          401:
            description: Incorrect Credentials
            body: {}
          403:
            description: Forbidden
            body: {}
          406:
            description: Not Acceptable Input
            body: {}
          409:
            description: Data Conflict
            body: {}
          413:
            description: Payload Too Large
            body: {}
          415:
            description: Un-Supported Content Type
            body: {}
          451:
            description: Un-Available For Legal Reasons
            body: {}
          500:
            description: Internal API Error
            body: {}
          501:
            description: Not Implemented
            body: {}
          503:
            description: API Unavailable
            body: {}
          504:
            description: Request Timeout
            body: {}
          511:
            description: Authentication Required
            body: {}
    /a:
      get:
        displayName: DNS Creation
        description: DNS Creation API
        queryParameters:
          domain:
            required: true
            example:
              value: yourdomain.tld,seconddomain.tld
            displayName: domain
            description: Domain or domain names separated by a comma
            type: string
        responses:
          200:
            description: Success
            body:
              application/json:
                example:
                  value:
                    domain: LIST OF DOMAINS ADDED
                    nameservers:
                      ns1: NAME SERVER ONE TO POINT YOUR DOMAIN AT
                      ns2: NAME SERVER TWO TO POINT YOUR DOMAIN AT
                      ns3: NAME SERVER THREE TO POINT YOUR DOMAIN AT
                      ns4: NAME SERVER FOUR TO POINT YOUR DOMAIN AT
                displayName: Response
                type: DnsCreationModelResponse
          400:
            description: Bad Request
            body: {}
          401:
            description: Incorrect Credentials
            body: {}
          403:
            description: Forbidden
            body: {}
          406:
            description: Not Acceptable Input
            body: {}
          409:
            description: Data Conflict
            body: {}
          413:
            description: Payload Too Large
            body: {}
          415:
            description: Un-Supported Content Type
            body: {}
          451:
            description: Un-Available For Legal Reasons
            body: {}
          500:
            description: Internal API Error
            body: {}
          501:
            description: Not Implemented
            body: {}
          503:
            description: API Unavailable
            body: {}
          504:
            description: Request Timeout
            body: {}
          511:
            description: Authentication Required
            body: {}
/u:
  /i:
    get:
      displayName: Get User Info
      description: Get User Info API
      queryParameters:
        user:
          required: true
          example:
            value: UID
          displayName: user
          description: Users User ID
          type: string
      responses:
        200:
          description: Success
          body:
            application/json:
              example:
                value:
                  request: REQUEST TYPE
                  uid: Users UID
                  apiuid: API SIDE USER ID
                  verified: RETURNS TRUE IF USER IS VERIFIED
                  id: TRANSACTION ID
                  info:
                    realname: USERS REAL NAME
                    displayname: USERS USERNAME
                    avatar: USER AVATAR URL
                    email: USERS EMAIL
                    address: USERS ADDRESS IN ONE LINE SEPERATED BY COMMAS
                    address1: USERS ADDRESS LINE ONE
                    address2: USERS ADDRESS LINE TWO
                    city: USERS ADDRESS CITY
                    state: USERS ADDRESS STATE
                    zipcode: USERS ADDRESS ZIPCODE
                    phone: USERS CELL PHONE NUMBER
                    lastlogin: USERS LAST LOGIN
                    ip: USERS IP
                    2fa: RETURNS TRUE IF 2FA IS ENABLED
                    iplock: RETURNS TRUE IF IP LOCK IS ENABLED
              displayName: Response
              type: UserInformationModelResponse
        400:
          description: Bad Request
          body: {}
        401:
          description: Incorrect Credentials
          body: {}
        403:
          description: Forbidden
          body: {}
        406:
          description: Not Acceptable Input
          body: {}
        409:
          description: Data Conflict
          body: {}
        413:
          description: Payload Too Large
          body: {}
        415:
          description: Un-Supported Content Type
          body: {}
        451:
          description: Un-Available For Legal Reasons
          body: {}
        500:
          description: Internal API Error
          body: {}
        501:
          description: Not Implemented
          body: {}
        503:
          description: API Unavailable
          body: {}
        504:
          description: Request Timeout
          body: {}
        511:
          description: Authentication Required
          body: {}
  /u:
    get:
      displayName: Update User
      description: Update User API
      queryParameters:
        user:
          required: true
          example:
            value: UID
          displayName: user
          description: Users UID, Username, Or Email
          type: string
        avatar:
          required: true
          example:
            value: https://img.cdnurl.com/UID/image
          displayName: avatar
          description: Avatar Image URL
          type: string
        custom input:
          required: true
          example:
            value: custom input
          displayName: custom input
          description: Custom input variable for users profile
          type: string
      responses:
        200:
          description: Success
          body:
            application/json:
              example:
                value:
                  request: REQUEST TYPE
                  updated: RETURNS TRUE, IF USERS PROFILE WAS SUCCESSFULLY UPDATED
                  id: TRANSACTION ID
                  info:
                    uid: USERS ID
                    apiuid: API SIDE USER ID
                    avatar: INPUTTED AVATAR URL
                    custom-input: CUSTOM INPUTTED PROFILE DATA
              displayName: Response
              type: UserUpdateModelResponse
        400:
          description: Bad Request
          body: {}
        401:
          description: Incorrect Credentials
          body: {}
        403:
          description: Forbidden
          body: {}
        406:
          description: Not Acceptable Input
          body: {}
        409:
          description: Data Conflict
          body: {}
        413:
          description: Payload Too Large
          body: {}
        415:
          description: Un-Supported Content Type
          body: {}
        451:
          description: Un-Available For Legal Reasons
          body: {}
        500:
          description: Internal API Error
          body: {}
        501:
          description: Not Implemented
          body: {}
        503:
          description: API Unavailable
          body: {}
        504:
          description: Request Timeout
          body: {}
        511:
          description: Authentication Required
          body: {}
  /d:
    get:
      displayName: Delete User
      description: Delete User API
      queryParameters:
        user:
          required: true
          example:
            value: UID
          displayName: user
          description: Users UID, Username, or Email
          type: string
      responses:
        200:
          description: Success
          body:
            application/json:
              example:
                value:
                  request: REQUEST TYPE
                  deleted: RETURNS TRUE, IF USERS ACCOUNT WAS SUCCESSFULLY DELETED
                  id: TRANSACTION ID
              displayName: Response
              type: UserDeletionResponseModel
        400:
          description: Bad Request
          body: {}
        401:
          description: Incorrect Credentials
          body: {}
        403:
          description: Forbidden
          body: {}
        406:
          description: Not Acceptable Input
          body: {}
        409:
          description: Data Conflict
          body: {}
        413:
          description: Payload Too Large
          body: {}
        415:
          description: Un-Supported Content Type
          body: {}
        451:
          description: Un-Available For Legal Reasons
          body: {}
        500:
          description: Internal API Error
          body: {}
        501:
          description: Not Implemented
          body: {}
        503:
          description: API Unavailable
          body: {}
        504:
          description: Request Timeout
          body: {}
        511:
          description: Authentication Required
          body: {}
/a:
  /u:
    /r:
      get:
        displayName: User Registration
        description: User Registration API
        queryParameters:
          email:
            required: true
            example:
              value: email@email.com
            displayName: email
            description: Users Email
            type: string
          user:
            required: true
            example:
              value: UID
            displayName: user
            description: Users Username
            type: string
          password:
            required: true
            example:
              value: Password
            displayName: password
            description: Users Password
            type: string
          name:
            required: false
            example:
              value: John Doe
            displayName: name
            description: Users Name
            type: string
          phone:
            required: false
            example:
              value: 1234567890
            displayName: phone
            description: Users Cellphone Number
            type: integer
            format: int32
          countrycode:
            required: false
            example:
              value: 1
            displayName: countrycode
            description: Users Country Code (US = 1)
            type: integer
            format: int32
          address:
            required: false
            example:
              value: 3301 South Greenfield Rd, Gilbert, AZ 85297
            displayName: address
            description: Users Address
            type: string
        responses:
          200:
            description: Success
            body:
              application/json:
                example:
                  value:
                    request: REQUEST TYPE
                    active: RETURNS TRUE, IF USER WAS SUCCESSFULLY REGISTERED
                    id: TRANSACTION ID
                    info:
                      uid: USERS ID
                      apiuid: API SIDE USER ID
                      realname: USERS REAL NAME
                      displayname: USERS USERNAME
                      email: USERS EMAIL
                      address: USERS ADDRESS
                      phone: USERS CELL PHONE NUMBER
                displayName: Response
                type: UserRegistrationModelResponse
          400:
            description: Bad Request
            body: {}
          401:
            description: Incorrect Credentials
            body: {}
          403:
            description: Forbidden
            body: {}
          406:
            description: Not Acceptable Input
            body: {}
          409:
            description: Data Conflict
            body: {}
          413:
            description: Payload Too Large
            body: {}
          415:
            description: Un-Supported Content Type
            body: {}
          451:
            description: Un-Available For Legal Reasons
            body: {}
          500:
            description: Internal API Error
            body: {}
          501:
            description: Not Implemented
            body: {}
          503:
            description: API Unavailable
            body: {}
          504:
            description: Request Timeout
            body: {}
          511:
            description: Authentication Required
            body: {}
    /l:
      get:
        displayName: User Authentication
        description: User Authentication API
        queryParameters:
          user:
            required: true
            example:
              value: Username
            displayName: user
            description: Users Username or Email
            type: string
          password:
            required: true
            example:
              value: Password
            displayName: password
            description: Users Password
            type: string
        responses:
          200:
            description: Success
            body:
              application/json:
                example:
                  value:
                    request: REQUEST TYPE
                    uid: Users UID
                    valid: RETURNS TRUE IF USER LOGIN DETAILS ARE VALID
                    id: TRANSACTION ID
                    info:
                      uid: USERS ID
                      apiuid: API SIDE USER ID
                      realname: USERS REAL NAME
                      displayname: USERS USERNAME
                      avatar: USER AVATAR URL
                      email: USERS EMAIL
                      address: USERS ADDRESS
                      phone: USERS CELL PHONE NUMBER
                      lastlogin: USERS LAST LOGIN
                      ip: USERS IP
                      2fa: RETURNS TRUE IF 2FA IS ENABLED
                      iplock: RETURNS TRUE IF IP LOCK IS ENABLED
                displayName: Response
                type: UserAuthenticationModelResponse
          400:
            description: Bad Request
            body: {}
          401:
            description: Incorrect Credentials
            body: {}
          403:
            description: Forbidden
            body: {}
          406:
            description: Not Acceptable Input
            body: {}
          409:
            description: Data Conflict
            body: {}
          413:
            description: Payload Too Large
            body: {}
          415:
            description: Un-Supported Content Type
            body: {}
          451:
            description: Un-Available For Legal Reasons
            body: {}
          500:
            description: Internal API Error
            body: {}
          501:
            description: Not Implemented
            body: {}
          503:
            description: API Unavailable
            body: {}
          504:
            description: Request Timeout
            body: {}
          511:
            description: Authentication Required
            body: {}
